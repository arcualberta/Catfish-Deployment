{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./wwwroot/assets/js/catfish.edititem.js"],"names":["document","getElementById","piranha","itemlist","Vue","el","data","getString","postString","content","loading","item","itemId","nameAttribute","descriptionAttribute","buttonOptions","mcDropdownButtonLabel","activeOption","languages","en","fr","sp","DEFAULT_LANGUAGE","languageLabels","sections","title","metadataSets","metadataSets_type","metadataSetLabel","inputTypes","originalFieldIndexMaster","originalFields","isInPreviewMode","savePreviewEditButtonType","saveSuccessfulLabel","saveFailedLabel","saveStatus","fieldRequiredLabel","valueLabel","deleteLabel","computed","itemName","get","Values","$values","Value","methods","fetchData","self","console","log","baseUrl","permissions","load","fetch","then","response","json","result","Name","Description","MetadataSets","$type","updateBindings","values","setLanguageLabels","setOriginalFields","error","performMCButtonAction","event","option","saveForm","preventDefault","validForm","forms","getElementsByClassName","Array","prototype","filter","call","form","checkValidity","stopPropagation","classList","add","method","headers","body","JSON","stringify","res","ok","setTimeout","bind","$","each","i","e","nestable","maxDepth","group","callback","l","id","attr","items","notifications","push","status","type","sites","nextTick","addNewEntry","metadataSetId","fieldId","newEntry","parse","Fields","Id","uuidv1","splice","tmp","language","changeButtonLabel","newLabel","entries","index","metadataSet","length","field","flattened","Object","keys","some","$set","count","startingIndex","matched","deleteField","setStaticItems","StaticItems","managerSideValues","editItemLabels","BUTTON_OPTION_LABELS","DROPDOWN_BUTTON_LABEL","ACTIVE_OPTION_LABEL","SECTION_LABEL_1","SECTION_LABEL_2","METADATASET_LABEL","SAVE_SUCCESSFUL_LABEL","SAVE_FAILED_LABEL","FIELD_REQUIRED_LABEL","VALUE_LABEL","DELETE_LABEL","updated","created","window","location","href","substring","lastIndexOf","mounted","ready","tooltip","selector"],"mappings":"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","file":"editItemBundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"editItemBundle\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"./wwwroot/assets/js/catfish.edititem.js\",\"vendorsManagerSide\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","//import { VueEditor } from \"vue2-editor\";\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport StaticItems from '../static/string-values.json';\r\n/**\r\n * Javascript Vue code for creating a single item edit layout in ItemEdit.cshtml.\r\n */\r\n\r\n\r\n/**\r\n * This check makes sure the file is only run on the page with\r\n * the element. Not a huge deal, can be removed if it's causing issues.\r\n */\r\nif (document.getElementById(\"item-edit-page\")) {\r\n    piranha.itemlist = new Vue({\r\n        el: '#item-edit-page',\r\n        /*components: {\r\n            VueEditor\r\n        },*/\r\n        data() {\r\n            return {\r\n                //api strings\r\n                getString: \"manager/api/items/\",\r\n                postString: \"manager/items/save\",\r\n\r\n                content: \"<h1>Some initial content</h1>\",\r\n\r\n                loading: true,\r\n                item: null,\r\n                itemId: null,\r\n                nameAttribute: null,\r\n                descriptionAttribute: null,\r\n                buttonOptions: [],\r\n                //label for multichoice dropdown button\r\n                mcDropdownButtonLabel: \"\",\r\n                activeOption: \"\",\r\n\r\n                //bring this in from somewhere else, will have ALL language abbreviations in it\r\n                languages: {\r\n                    en: \"English\",\r\n                    fr: \"Français\",\r\n                    sp: \"Español\"\r\n                },\r\n                DEFAULT_LANGUAGE: 'en',\r\n                //array for displaying language labels listed in received JSON\r\n                //im assuming here that all fields will have the\r\n                //same languages enabled, since languages are enabled sitewide\r\n                languageLabels: [],\r\n\r\n                sections: [\r\n                    {\r\n                        title: ''\r\n                    },\r\n                    {\r\n                        title: ''\r\n                    },\r\n                ],\r\n\r\n                metadataSets: [],\r\n                metadataSets_type: null,\r\n                metadataSetLabel: \"Metadata Sets\",\r\n                //key-value pairs of input types from the database and their associated\r\n                //input type\r\n                inputTypes: {\r\n                    \"text\": \"Catfish.Core.Models.Contents.Fields.TextField\",\r\n                    \"textarea\": \"Catfish.Core.Models.Contents.Fields.TextArea\",\r\n                },\r\n\r\n                //stores the first time a field appears in the fields of a metadata set\r\n                //this would be better handled by using child components but \r\n                //project structure for Vue stuff is really weird...\r\n                originalFieldIndexMaster: [],\r\n                originalFields: [],\r\n                isInPreviewMode: false,\r\n                savePreviewEditButtonType: \"submit\",\r\n\r\n                saveSuccessfulLabel: \"Saved!\",\r\n                saveFailedLabel: \"Failed to Save\",\r\n                saveStatus: 0,\r\n\r\n                fieldRequiredLabel: '',\r\n                valueLabel: '',\r\n                deleteLabel:''\r\n            }\r\n        },\r\n        computed: {\r\n            itemName: {\r\n                get: function () {\r\n                    return this.nameAttribute.Values.$values[0].Value || \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n        methods: {\r\n            /**\r\n             * Fetches the data associated with the item's ID\r\n             **/\r\n            fetchData() {\r\n                var self = this;\r\n                console.log(piranha.baseUrl + this.getString + this.itemId);\r\n                piranha.permissions.load(function () {\r\n                    fetch(piranha.baseUrl + self.getString + self.itemId)\r\n                        .then(function (response) { return response.json(); })\r\n                        .then(function (result) {\r\n                            self.item = result;\r\n                            console.log(\"json received:\", self.item);\r\n                            self.nameAttribute = result.Name;\r\n                            self.descriptionAttribute = result.Description;\r\n                            self.metadataSets = result.MetadataSets.$values;\r\n                            self.metadataSets_type = result.MetadataSets.$type;\r\n                            self.updateBindings = true;\r\n\r\n                            //for testing purposes, remove after\r\n                            /*result.metadataSets[0].fields[0].name.values.push({\r\n\r\n                                \"format\": \"plain\",\r\n                                \"language\": \"fr\",\r\n                                \"rank\": 0,\r\n                                \"value\": \"Nom\",\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[0].values.push({\r\n                                \"values\": [{\r\n                                    \"format\": \"plain\",\r\n                                    \"language\": \"fr\",\r\n                                    \"rank\": 0,\r\n                                    \"value\": \"I am writing in french\",\r\n                                    \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\t\t\t\t\t\t\t\t}]\r\n                                \r\n\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[0].description.values.push({\r\n\r\n                                \"format\": \"plain\",\r\n                                \"language\": \"fr\",\r\n                                \"rank\": 0,\r\n                                \"value\": \"French description goes here\",\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\r\n                            });\r\n\r\n\r\n                            //for testing purposes, remove after v2\r\n                            result.metadataSets[0].fields.push({\r\n                                \"$type\": \"Catfish.Core.Models.Contents.TextArea\",\r\n                                \"values\": [],\r\n                                \"name\": {\r\n                                    \"values\": []\r\n                                },\r\n                                \"description\": {\r\n                                    \"values\": []\r\n                                },\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Fields.TextArea, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[2].name.values.push({\r\n\r\n                                \"format\": \"plain\",\r\n                                \"language\": \"en\",\r\n                                \"rank\": 0,\r\n                                \"value\": \"Some cool textarea stuff\",\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[2].values.push({\r\n                                \"values\": [{\r\n                                    \"format\": \"plain\",\r\n                                    \"language\": \"en\",\r\n                                    \"rank\": 0,\r\n                                    \"value\": \"I am some heckin neat text\",\r\n                                    \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n                                }],\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.MultilingualText\"\r\n\r\n                            });\r\n\r\n                            result.metadataSets[0].fields[2].description.values.push({\r\n\r\n                                \"format\": \"plain\",\r\n                                \"language\": \"en\",\r\n                                \"rank\": 0,\r\n                                \"value\": \"A description to surpass the century\",\r\n                                \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n\r\n                            });*/\r\n\r\n                            /*result.metadataSets.push({\r\n                                name: {\r\n                                    values: [\r\n                                        {\r\n                                            \"format\": \"plain\",\r\n                                            \"language\": \"en\",\r\n                                            \"rank\": 0,\r\n                                            \"value\": \"I am a test\",\r\n                                            \"modelType\": \"Catfish.Core.Models.Contents.Text, Catfish.Core, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\"\r\n                                        }\r\n                                    ]\r\n                                }\r\n                            });*/\r\n\r\n                            self.sections[0].values = self.nameAttribute.Values.$values;\r\n                            self.sections[1].values = self.descriptionAttribute.Values.$values;\r\n\r\n                            //prepare language labels\r\n                            self.setLanguageLabels(self.sections);\r\n\r\n                            //track original field indices\r\n                            self.setOriginalFields();\r\n\r\n                        })\r\n                        .catch(function (error) { console.log(\"error:\", error); });\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Perform the action the multichoice button states.\r\n             * @param {any} event\r\n             */\r\n            performMCButtonAction(event, option) {\r\n                switch (option) {\r\n                    case this.buttonOptions[0]:\r\n                        this.saveForm(event);\r\n                        break;\r\n                    case this.buttonOptions[1]:\r\n                        //edit view\r\n                        this.isInPreviewMode = false;\r\n                        break;\r\n                    case this.buttonOptions[2]:\r\n                        //preview view\r\n                        this.isInPreviewMode = true;\r\n                        break;\r\n                }\r\n                this.activeOption = option;\r\n\t\t\t},\r\n\r\n            /**\r\n             * Saves the form, calls the API to send the data to.\r\n             * @param {any} event\r\n             */\r\n            saveForm(event) {\r\n                event.preventDefault();\r\n                let validForm = true;\r\n\r\n                //do form validation here and dont submit if problems\r\n                var forms = document.getElementsByClassName('edit-form');\r\n                // Loop over them and prevent submission\r\n                Array.prototype.filter.call(forms, function (form) {\r\n                        if (form.checkValidity() === false) {\r\n                            event.preventDefault();\r\n                            event.stopPropagation();\r\n                            validForm = false;\r\n                        }\r\n                        console.log(\"form validated\");\r\n                        form.classList.add('was-validated');\r\n                });\r\n\r\n                if (validForm) {\r\n                    this.item.Name = this.nameAttribute;\r\n                    this.item.Description = this.descriptionAttribute;\r\n                    this.item.MetadataSets = {\r\n                        $type: this.metadataSets_type,\r\n                        $values: this.metadataSets,\r\n\r\n                    };\r\n\r\n                    console.log(\"item being posted is here:\", this.item);\r\n\r\n                    fetch(piranha.baseUrl + this.postString,\r\n                        {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                            },\r\n                            body: JSON.stringify(this.item)\r\n                        })\r\n                        .then((res) =>  {\r\n                            if (res.ok) {\r\n                                this.saveStatus = 1;\r\n                                console.log(\"????\");\r\n                                setTimeout(() => { this.saveStatus = 0; }, 3000);\r\n                            } else {\r\n                                this.saveStatus = -1;\r\n                                console.log(\"!!!!!\");\r\n                            }\r\n                            console.log(\"res\",res);\r\n                            return res;\r\n                        })\r\n                        .then(function (data) { /*alert(JSON.stringify(data))*/ })\r\n                        .catch((error) => {\r\n                            console.error('Error:', error);\r\n                        });\r\n\t\t\t\t}\r\n                \r\n\t\t\t},\r\n\r\n            bind() {\r\n                var self = this;\r\n\r\n                $(\".sitemap-container\").each(function (i, e) {\r\n                    $(e).nestable({\r\n                        maxDepth: 100,\r\n                        group: i,\r\n                        callback: function (l, e) {\r\n                            fetch(piranha.baseUrl + \"manager/api/page/move\", {\r\n                                method: \"post\",\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                },\r\n                                body: JSON.stringify({\r\n                                    id: $(e).attr(\"data-id\"),\r\n                                    items: $(l).nestable(\"serialize\")\r\n                                })\r\n                            })\r\n                                .then(function (response) { return response.json(); })\r\n                                .then(function (result) {\r\n                                    piranha.notifications.push(result.status);\r\n\r\n                                    if (result.status.type === \"success\") {\r\n                                        $('.sitemap-container').nestable('destroy');\r\n                                        self.sites = [];\r\n                                        Vue.nextTick(function () {\r\n                                            self.sites = result.sites;\r\n                                            Vue.nextTick(function () {\r\n                                                self.bind();\r\n                                            });\r\n                                        });\r\n                                    }\r\n                                })\r\n                                .catch(function (error) {\r\n                                    console.log(\"error:\", error);\r\n                                });\r\n                        }\r\n                    })\r\n                });\r\n            },\r\n\r\n            /**\r\n             * Adds another entry set to the field\r\n             * @param {any} metadataSetId metadataset index\r\n             * @param {any} fieldId field index\r\n             */\r\n            addNewEntry(metadataSetId, fieldId) {\r\n\r\n                let newEntry = JSON.parse(JSON.stringify(this.metadataSets[metadataSetId].Fields.$values[fieldId]));\r\n                newEntry.Id = uuidv1();\r\n\r\n                for (let item of newEntry.Values.$values) {\r\n                    item.Values.$values[0].Value = \"\";\r\n\t\t\t\t}\r\n\r\n                this.metadataSets[metadataSetId].Fields.$values.splice(fieldId + 1, 0, newEntry);\r\n                this.setOriginalFields();\r\n\r\n            },\r\n            /**\r\n             * Sets the initial language labels youll need for the item.\r\n             * @param {any} sections\r\n             */\r\n            setLanguageLabels(sections) {\r\n                for (let item of sections[0].values) {\r\n                    let tmp = this.languages[item.language];\r\n                    if (typeof tmp === 'undefined') {\r\n                        tmp = this.languages[this.DEFAULT_LANGUAGE];\r\n\t\t\t\t\t}\r\n                    this.languageLabels.push(tmp);\r\n                }\r\n            },\r\n\r\n            /**\r\n             * Changes the multichoice button's title to the\r\n             * pass parameter (user chose it from the dropdown)\r\n             * @param {any} newLabel the new label for the button\r\n             */\r\n            changeButtonLabel(newLabel) {\r\n                this.mcDropdownButtonLabel = newLabel;\r\n                if (this.mcDropdownButtonLabel === this.buttonOptions[0]) {\r\n                    this.savePreviewEditButtonType = \"submit\";\r\n                } else {\r\n                    this.savePreviewEditButtonType = \"button\";\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n            /**\r\n             * Stores the indices of the first original version of a field.\r\n             * This is useful for knowing which fields will not be able to be deleted\r\n             * because they are the original version to be shown to the user.\r\n             * If they were able to be deleted, there would be no way to show that field again!\r\n             **/\r\n            setOriginalFields() {\r\n                this.originalFieldIndexMaster.splice(0);\r\n                this.originalFields.splice(0);\r\n\r\n                for (let [index, metadataSet] of this.metadataSets.entries()) {\r\n                    this.originalFieldIndexMaster.splice(this.originalFieldIndexMaster.length, 1, {});\r\n                    this.originalFields.splice(this.originalFields, 1, []); \r\n\r\n                    for (let [i, field] of metadataSet.Fields.$values.entries()) {\r\n                        //if field differs from fields in originalFieldIndexMaster,\r\n                        //track as a new field\r\n                        var flattened = Object.keys(this.originalFieldIndexMaster[index]);\r\n\r\n                        if (this.originalFieldIndexMaster[index].length === 0\r\n                            || !flattened.some(item => item === field.Id) ) {\r\n\r\n                            this.$set(this.originalFieldIndexMaster[index], field.Id, {\r\n                                field: field.Id,\r\n                                count: 1,\r\n                                startingIndex: null\r\n                            });\r\n                            this.$set(this.originalFieldIndexMaster[index][field.Id], 'startingIndex', i);\r\n                            this.originalFields[index].splice(this.originalFields[index].length, 1, i); \r\n                        }else {\r\n                            //add to count of whichever is already in the object\r\n                            //this needs to be checked to see if it works\r\n                            var matched = flattened.filter((item, index) => {\r\n                                if (item === field.Id) {\r\n                                    return item;\r\n\t\t\t\t\t\t\t\t}\r\n                            });\r\n\r\n                            this.$set(this.originalFieldIndexMaster[index][matched[0]], 'count', \r\n                                this.originalFieldIndexMaster[index][matched[0]].count + 1);\r\n\t                    }\r\n\t\t\t\t\t}\r\n                    console.log(\"originalFields:\", this.originalFieldIndexMaster);\r\n                    console.log(\"indices: \", this.originalFields);\r\n                }\r\n\r\n            },\r\n\r\n\r\n            /**\r\n             * Deletes the field from the item\r\n             * @param {any} metadataSetId\r\n             * @param {any} fieldId\r\n             */\r\n            deleteField(metadataSetId, fieldId) {\r\n                this.metadataSets[metadataSetId].Fields.$values.splice(fieldId, 1);\r\n                this.setOriginalFields();\r\n            },\r\n\r\n            setStaticItems() {\r\n                this.buttonOptions = StaticItems.managerSideValues.editItemLabels.BUTTON_OPTION_LABELS;\r\n                this.mcDropdownButtonLabel = StaticItems.managerSideValues.editItemLabels.DROPDOWN_BUTTON_LABEL;\r\n                this.activeOption = StaticItems.managerSideValues.editItemLabels.ACTIVE_OPTION_LABEL;\r\n                this.sections[0].title = StaticItems.managerSideValues.editItemLabels.SECTION_LABEL_1;\r\n                this.sections[1].title = StaticItems.managerSideValues.editItemLabels.SECTION_LABEL_2;\r\n                this.metadataSetLabel = StaticItems.managerSideValues.editItemLabels.METADATASET_LABEL;\r\n                this.saveSuccessfulLabel = StaticItems.managerSideValues.editItemLabels.SAVE_SUCCESSFUL_LABEL;\r\n                this.saveFailedLabel = StaticItems.managerSideValues.editItemLabels.SAVE_FAILED_LABEL;\r\n                this.fieldRequiredLabel = StaticItems.managerSideValues.editItemLabels.FIELD_REQUIRED_LABEL;\r\n                this.valueLabel = StaticItems.managerSideValues.editItemLabels.VALUE_LABEL;\r\n                this.deleteLabel = StaticItems.managerSideValues.editItemLabels.DELETE_LABEL;\r\n\r\n\t\t\t}\r\n        },\r\n        updated() {\r\n            if (this.updateBindings) {\r\n                this.bind();\r\n                this.updateBindings = false;\r\n            }\r\n\r\n            this.loading = false;\r\n        },\r\n        created() {\r\n            this.itemId = window.location.href.substring(window.location.href.lastIndexOf('/') + 1);\r\n            this.setStaticItems();\r\n            //call api\r\n            this.fetchData();\r\n        },\r\n        mounted() {\r\n\r\n            //initializes all tooltips\r\n            $(document).ready(function () {\r\n                $(\"body\").tooltip({ selector: '[data-toggle=tooltip]' });\r\n            });\r\n\t\t}\r\n    })\r\n}"],"sourceRoot":""}